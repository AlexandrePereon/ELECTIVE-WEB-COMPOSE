services:
  elective-web-front:
    image: ${NOM_REPO_DOCKERHUB}/${FRONT_MAIN_NAME}:${FRONT_MAIN_VERSION}
    container_name: frontend
    stdin_open: true
    ports:
      - "4000"
    restart: always
    depends_on:
      - elective-web-auth
      - elective-web-restauration
      - traefik
    expose:
      - 4000
    labels:
      - "traefik.http.routers.elective-web-front.rule=Host(`app.localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.elective-web-front.service=elective-web-front"
      - "traefik.http.services.elective-web-front.loadbalancer.server.port=4000"


  elective-web-auth:
    restart: always
    image: ${NOM_REPO_DOCKERHUB}/${BACK_AUTH_NAME}:${BACK_AUTH_VERSION}
    container_name: elective-web-auth
    depends_on:
      - mongo
      - traefik
      - mysql
    ports:
      - "3000"
    expose: 
      - 3000
    environment:
      - NODE_ENV_PROFILE=production
      - NODE_ENV_PREFIX=${BACK_AUTH_PREFIX}
    labels:
      - "traefik.http.routers.elective-web-auth.rule=Host(`app.localhost`) && PathPrefix(`${BACK_AUTH_PREFIX}`)" # Définir la règle de routage pour l'API
      - "traefik.http.services.elective-web-auth.loadbalancer.server.port=3000" # Définir le port du service

  elective-web-restauration:
      restart: always
      image: ${NOM_REPO_DOCKERHUB}/${BACK_RESTAURATION_NAME}:${BACK_RESTAURATION_VERSION}
      depends_on:
        - mongo
        - traefik
      ports:
        - "3001"
      expose: 
        - 3001
      environment:
        - NODE_ENV_PROFILE=production
        - NODE_ENV_PREFIX=${BACK_RESTAURATION_PREFIX}
      labels:
        - "traefik.http.routers.elective-web-restauration.rule=Host(`app.localhost`) && PathPrefix(`${BACK_RESTAURATION_PREFIX}`)" # Définir la règle de routage pour l'API
        - "traefik.http.services.elective-web-restauration.loadbalancer.server.port=3001" # Définir le port du service
        - "traefik.http.routers.elective-web-restauration.middlewares=auth-middleware" # Ajouter le middleware d'authentification

  mongo:
    restart: always
    image: mongo:${MONGO_VERSION}
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb_data:/data/db
    expose:
      - 27017
    depends_on:
      - traefik   
    
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    command: --init-file /docker-entrypoint-initdb.d/init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_script/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql_data:/var/lib/mysql
    expose:
      - 3306

  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --metrics.prometheus=true
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://elective-web-auth:3000${BACK_AUTH_PREFIX}/verify" # Définir l'adresse de l'API d'authentification
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User" # Définir le header à ajouter à la requête
      - "traefik.http.middlewares.auth-middleware.forwardauth.trustForwardHeader=true" # Si vous faites confiance au header X-Forwarded-For

  prometheus:
    image: prom/prometheus
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana
    ports:
      - 3010:3000
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./metrics/prometheus-datasource.yaml:/etc/grafana/provisioning/datasources/prometheus-datasource.yaml
      - ./metrics/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
services:
  elective-web-front:
    image: ${NOM_REPO_DOCKERHUB}/${FRONT_MAIN_NAME}:${FRONT_MAIN_VERSION}
    container_name: frontend
    stdin_open: true
    ports:
      - ${FRONT_MAIN_PORT}
    restart: always
    depends_on:
      - elective-web-auth
      - elective-web-restauration
      - traefik
    expose:
      - ${FRONT_MAIN_PORT}
    labels:
      - "traefik.http.routers.elective-web-front.rule=Host(`${BASE_URL}`) && PathPrefix(`/`)"
      - "traefik.http.services.elective-web-front.loadbalancer.server.port=${FRONT_MAIN_PORT}"


  elective-web-auth:
    restart: always
    image: ${NOM_REPO_DOCKERHUB}/${BACK_AUTH_NAME}:${BACK_AUTH_VERSION}
    container_name: elective-web-auth
    depends_on:
      - mongo
      - traefik
      - mysql
    ports:
      - ${BACK_AUTH_PORT}
    expose: 
      - ${BACK_AUTH_PORT}
    environment:
      - NODE_ENV_PROFILE=production
      - NODE_ENV_PREFIX=${BACK_AUTH_PREFIX}
    labels:
      - "traefik.http.routers.elective-web-auth.rule=Host(`${BASE_URL}`) && PathPrefix(`${BACK_AUTH_PREFIX}`)" # Définir la règle de routage pour l'API
      - "traefik.http.services.elective-web-auth.loadbalancer.server.port=${BACK_AUTH_PORT}" # Définir le port du service

  elective-web-restauration:
    restart: always
    image: ${NOM_REPO_DOCKERHUB}/${BACK_RESTAURATION_NAME}:${BACK_RESTAURATION_VERSION}
    depends_on:
      - mongo
      - traefik
    ports:
      - ${BACK_RESTAURATION_PORT}
    expose: 
      - ${BACK_RESTAURATION_PORT}
    environment:
      - NODE_ENV_PROFILE=production
      - NODE_ENV_PREFIX=${BACK_RESTAURATION_PREFIX}
    labels:
      - "traefik.http.routers.elective-web-restauration.rule=Host(`${BASE_URL}`) && PathPrefix(`${BACK_RESTAURATION_PREFIX}`)" # Définir la règle de routage pour l'API
      - "traefik.http.services.elective-web-restauration.loadbalancer.server.port=${BACK_RESTAURATION_PORT}" # Définir le port du service
      - "traefik.http.routers.elective-web-restauration.middlewares=auth-middleware" # Ajouter le middleware d'authentification

  mongo:
    restart: always
    image: mongo:${MONGO_VERSION}
    container_name: mongo
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}"
    volumes:
      - ./data/mongodb_data:/data/db
    expose:
      - ${MONGO_DB_PORT}
    depends_on:
      - traefik   
    
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    command: --init-file /docker-entrypoint-initdb.d/init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MY_SQL_PORT}:${MY_SQL_PORT}"
    volumes:
      - ./mysql_script/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./data/mysql_data:/var/lib/mysql
    expose:
      - ${MY_SQL_PORT}

  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --metrics.prometheus=true
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://elective-web-auth:3000${BACK_AUTH_PREFIX}/verify" # Définir l'adresse de l'API d'authentification
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User" # Définir le header à ajouter à la requête
      - "traefik.http.middlewares.auth-middleware.forwardauth.trustForwardHeader=true" # Si vous faites confiance au header X-Forwarded-For
  
  prometheus:
    image: prom/prometheus
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana
    ports:
      - ${GRAFANA_PORT}
    volumes:
      - ./data/grafana_data:/var/lib/grafana
      - ./metrics/prometheus-datasource.yaml:/etc/grafana/provisioning/datasources/prometheus-datasource.yaml
      - ./metrics/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}   
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT} 
      - GF_SERVER_ROOT_URL=${GRAFANA_PREFIX}
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    labels:
      - "traefik.http.routers.grafana.rule=Host(`${BASE_URL}`) && PathPrefix(`${GRAFANA_PREFIX}`)" 
      - "traefik.http.services.grafana.loadbalancer.server.port=${GRAFANA_PORT}"
# gitlab:
#   image: gitlab/gitlab-ee:${GITLAB_VERSION}
#   container_name: gitlab
#   restart: always
#   environment:
#     GITLAB_OMNIBUS_CONFIG: |
#       gitlab_rails['initial_root_password'] = "ComplexPassword123"
#       gitlab_rails['store_initial_root_password'] = true
#       external_url 'http://${BASE_URL}${GITLAB_PREFIX}'
#
#   ports:
#     - ${GITLAB_PORT}:80
#   volumes:
#     - './data/gitlab/config:/etc/gitlab'
#     - './data/gitlab/logs:/var/log/gitlab'
#     - './data/gitlab/data:/var/opt/gitlab'
#   shm_size: '256m'
#   labels:
#   - "traefik.http.routers.gitlab.rule=Host(`${BASE_URL}`) && PathPrefix(`${GITLAB_PREFIX}`)" 
#   - "traefik.http.services.gitlab.loadbalancer.server.port=80"
#   - "traefik.http.routers.gitlab.entrypoints=http"

    